package algorithm.loadbalance;

/**
 * 最小连接数（Least Connections）法
 * <pre/>
 *
 * 前面几种方法费尽心思来实现服务消费者请求次数分配的均衡，
 * 当然这么做是没错的，可以为后端的多台服务器平均分配工作量，
 * 最大程度地提高服务器的利用率，
 * 但是实际情况是否真的如此？
 * 实际情况中，请求次数的均衡真的能代表负载的均衡吗？
 * 这是一个值得思考的问题。
 *
 * 上面的问题，
 * 再换一个角度来说就是：以后端服务器的视角来观察系统的负载，而非请求发起方来观察。
 * 最小连接数法便属于此类。
 *
 * 最小连接数算法比较灵活和智能，
 * 由于后端服务器的配置不尽相同，对于请求的处理有快有慢，
 * 它正是根据后端服务器当前的连接情况，
 * 动态地选取其中当前积压连接数最少的一台服务器来处理当前请求，
 * 尽可能地提高后端服务器的利用效率，将负载合理地分流到每一台机器。
 * 由于最小连接数设计服务器连接数的汇总和感知，设计与实现较为繁琐，此处就不说它的实现了。
 */
public class LeastConnections {
}
